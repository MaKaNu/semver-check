{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"semver-check","text":"<p>This project publishes a simple webserver which validates input against semver.</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#semver_check.home","title":"<code>home()</code>","text":"<p>Serve the main HTML page.</p> Source code in <code>semver_check/__init__.py</code> <pre><code>@app.route(\"/\")\ndef home() -&gt; str:\n    \"\"\"Serve the main HTML page.\"\"\"\n    return render_template(\"index.html\")\n</code></pre>"},{"location":"modules/#semver_check.validate_version","title":"<code>validate_version()</code>","text":"<p>Endpoint to validate SemVer strings.</p> Source code in <code>semver_check/__init__.py</code> <pre><code>@app.route(\"/validate\", methods=[\"POST\"])\ndef validate_version() -&gt; tuple[Union[flask.wrappers.Response, str], int]:\n    \"\"\"Endpoint to validate SemVer strings.\"\"\"\n    request.get_data(as_text=True)\n    version = request.data.decode(\"utf-8\").strip()  # Get raw text from the body\n    if not version:\n        return \"Version string missing in the request body\", 400\n\n    if is_valid_semver(version):\n        # Respond with HTTP 200 for valid versions\n        return jsonify({\"version\": version, \"valid\": True}), 200\n    else:\n        # Respond with HTTP 400 for invalid versions\n        return jsonify({\"version\": version, \"valid\": False}), 400\n</code></pre>"},{"location":"modules/#semver_check.server.is_valid_semver","title":"<code>is_valid_semver(version)</code>","text":"<p>Test if the provided version is following SemVer pricinipals.</p> <p>For now a simple but rather complicated to read regex is used. TODO: Use the Backus-Naur Form as input an validate hirachic.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>provided version number to check</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>weather the verion is following SemVer principals or not.</p> Source code in <code>semver_check/server.py</code> <pre><code>def is_valid_semver(version: str) -&gt; bool:\n    \"\"\"Test if the provided version is following SemVer pricinipals.\n\n    For now a simple but rather complicated to read regex is used.\n    TODO: Use the Backus-Naur Form as input an validate hirachic.\n\n    Args:\n        version (str): provided version number to check\n\n    Returns:\n        bool: weather the verion is following SemVer principals or not.\n    \"\"\"\n    semver_regex = re.compile(\n        r\"^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\"\n        r\"(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?\"\n        r\"(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$\"\n    )\n    return bool(semver_regex.match(version))\n</code></pre>"},{"location":"publish_azure/","title":"With Github Education Program","text":"<p>This is how I did it and a personal documentation than the right way to do it.</p> <ol> <li>Connect you Github Account with Link from the Education page.</li> <li>Install Azure CLI tool on your System.</li> </ol>"},{"location":"publish_azure/#login-via-azure-cli","title":"Login via Azure CLI","text":"<p>Run following command to authenticate against azure:</p> <pre><code>az login --allow-no-subscriptions\n</code></pre> <p>I've tried without <code>--allow-no-subscriptions</code> but it doesn't worked out. For future logins I could drop the flag.</p>"},{"location":"publish_azure/#find-azure-location","title":"Find Azure Location","text":"<p>With following command you are able to find your nearest azure instance:</p> <pre><code>az account list-locations\n</code></pre> <p>I have selected <code>germanywestcentral</code>.</p>"},{"location":"publish_azure/#create-resource-group","title":"Create Resource Group","text":"<p>We first need a named resource group. I decided to name it <code>semVerCheck</code>.</p> <pre><code>az group create --name semVerCheck --location germanywestcentral\n</code></pre>"},{"location":"publish_azure/#create-azure-container-registry","title":"Create Azure Container Registry","text":"<p>We need also a registry where we can upload our image to. Dockerhub might also be possible, but I remained with azure. The name of the registry needs to be unique, since the registry will be deployed as subdomain of azurecr.io. I have used <code>semverreg</code> deploy it under the <code>semVerCheck</code> resource group.</p> <pre><code>az acr create --resource-group semVerCheck --name semverreg --sku basic\n</code></pre>"},{"location":"publish_azure/#push-the-container-image","title":"Push the Container Image","text":"<p>Next we need to tag our docker image and push it to our fresh create registry.</p> <pre><code>docker tag semver-flask-app:latest semverreg.azurecr.io/semver-flask-app:latest\ndocker push semverreg.azurecr.io/semver-flask-app:latest\n</code></pre> <p>Here I am unsure about how I dumped my system with information and data that I tend to have only temporary.</p>"},{"location":"publish_azure/#create-docker-container","title":"Create Docker Container","text":"<p>First we need to login to acr and gather the auth data.</p> <pre><code>az acr login --name semverreg\nAZUSERNAME=$(az acr credential show --name semverreg --query username --output tsv)\nAZPW=$(az acr credential show --name semverreg --query passwords[0].value --output tsv)\n</code></pre> <p>Now we are able to create the container</p> <pre><code>az container create \\\n    --resource-group semVerCheck \\\n    --name semver-flask-app \\\n    --image semverreg.azurecr.io/semver-flask-app:latest \\\n    --cpu 1 --memory 1.5 \\\n    --ports 8000 \\\n    --dns-name-label semver-check \\\n    --registry-login-server semverreg.azurecr.io \\\n    --registry-username $AZUSERNAME \\\n    --registry-password $AZPW\n</code></pre> <p>It will take sometime until the dns name is active.</p>"},{"location":"publish_azure/#test-it","title":"Test it","text":""},{"location":"publish_azure/#status-of-container","title":"Status of Container","text":"<pre><code>az container show \\\n    --resource-group semVerCheck \\\n    --name semver-flask-app \\\n    --query instanceView.state \\\n    --out table\n</code></pre> <p>or</p> <pre><code>az container show \\\n    --resource-group semVerCheck \\\n    --name semver-flask-app \\\n    --query \"{FQDN:ipAddress.fqdn,ProvisioningState:provisioningState}\" \\\n    --out table\n</code></pre>"},{"location":"publish_azure/#all-information","title":"All information","text":"<pre><code>az container show \\\n    --resource-group semVerCheck \\\n    --name semver-flask-app \\\n    --out table\n</code></pre>"}]}